{"version":3,"sources":["js/currying.js","index.js"],"names":["console","log","_sum3","x","y","z","_sum4","p","q","r","s","t","curry","fn","innerFn","N","args","length","sum3","infiniteCurry","next","reduce","acc","a","call","iSum","infiniteVarArgsCurry","seed","reduceValue","seedValue","iSumVarArgs","iMul","sum","numbers","number","answer"],"mappings":";AAAAA,QAAQC,IAAI,SAEZ,MAAMC,EAAQ,CAACC,EAAGC,EAAGC,IAAMF,EAAIC,EAAIC,EAC7BC,EAAQ,CAACC,EAAGC,EAAGC,EAAGC,EAAGC,IAAMJ,EAAIC,EAAIC,EAAIC,EAAIC,EAwB3CC,EAAQC,IACNC,MAAAA,EAAU,CAACC,EAAGC,IACX,IAAIb,IACLY,GAAKZ,EAAEc,OACFJ,KAAMG,KAASb,GAEjBW,EAAQC,EAAIZ,EAAEc,OAAQ,IAAID,KAASb,IAGvCW,OAAAA,EAAQD,EAAGI,OAAQ,KAGtBC,EAAON,EAAMV,GAEnBgB,EAAK,EAAG,EAARA,CAAW,GACXA,EAAK,EAALA,CAAQ,EAAG,GASX,MAAMC,EAAgBN,IACdO,MAAAA,EAAO,IAAIJ,IACRb,GACAA,EAKEiB,KAAQJ,EAAMb,GAJZa,EAAKK,OAAO,CAACC,EAAKC,IAChBV,EAAGW,KAAKX,EAAIS,EAAKC,GACvB,GAKFH,OAAAA,KAGHK,EAAON,EAAc,CAAChB,EAAGC,IAAMD,EAAIC,GACzCJ,QAAQC,IAAIwB,EAAK,EAALA,CAAQ,EAARA,CAAW,EAAXA,CAAc,EAAdA,CAAiB,GAAjBA,CAAqB,EAArBA,IAEZ,MAAMC,EAAuB,CAACb,EAAIc,KAC1BC,MAAAA,EAAc,CAACZ,EAAMa,IACzBb,EAAKK,OAAO,CAACC,EAAKC,IACTV,EAAGW,KAAKX,EAAIS,EAAKC,GACvBM,GACCT,EAAO,IAAIJ,IACR,IAAIb,IACJA,EAAEc,OAGAG,KAAQJ,EAAMY,EAAYzB,EAAGwB,IAF3BC,EAAYZ,EAAMW,GAKxBP,OAAAA,KAGHU,EAAcJ,EAAqB,CAACvB,EAAGC,IAAMD,EAAIC,EAAG,GACpD2B,EAAOL,EAAqB,CAACvB,EAAGC,IAAMD,EAAIC,EAAG,GAEnDJ,QAAQC,IAAI6B,EAAY,EAAZA,CAAe,EAAG,EAAlBA,CAAqB,EAAG,EAAxBA,CAA2B,EAAG,EAAG,EAAjCA,IACZ9B,QAAQC,IAAI8B,EAAK,EAALA,CAAQ,EAAG,EAAXA,CAAc,EAAG,EAAjBA,IACZ,MAAMC,EAAM,IAAIC,IAAYA,EAAQZ,OAAO,CAACC,EAAKY,IAAWZ,EAAMY,EAAQ,GACpEC,EAASH,EAAI,EAAG,EAAG,GAAI,IAC7BhC,QAAQC,IAAIkC;;AC1FZ,aAAA,QAAA","file":"src.98368e67.js","sourceRoot":"../src","sourcesContent":["console.log('hello');\n\nconst _sum3 = (x, y, z) => x + y + z;\nconst _sum4 = (p, q, r, s, t) => p + q + r + s + t;\n\n// function curry(fn) {\n//   const N = fn.length;\n//   console.log(N);\n//   function innerFn(n, args) {\n//     return function actualInnerFn(a) {\n//       if (n <= 1) {\n//         return fn(...args, a);\n//       }\n//       return innerFn(n - 1, [...args, a]);\n//     };\n//   }\n//   return innerFn(N, []);\n// }\n\n// const sum3 = curry(_sum3);\n// const sum4 = curry(_sum4);\n\n// console.log(sum3(1)(3)(2));\n// console.log(sum4(1)(3)(2)(10)(7));\n\n// currying with varying quantity of args\n\nconst curry = fn => {\n  const innerFn = (N, args) => {\n    return (...x) => {\n      if (N <= x.length) {\n        return fn(...args, ...x);\n      }\n      return innerFn(N - x.length, [...args, ...x]);\n    };\n  };\n  return innerFn(fn.length, []);\n};\n\nconst sum3 = curry(_sum3);\n\nsum3(2, 3)(4);\nsum3(2)(3, 4);\n\n// return function actualInnerFn(...a) {\n//   if (n <= a.length) {\n//     return fn(...args, a);\n//   }\n//   return innerFn(n - a.length, [...args, ...a]);\n// }\n\nconst infiniteCurry = fn => {\n  const next = (...args) => {\n    return x => {\n      if (!x) {\n        return args.reduce((acc, a) => {\n          return fn.call(fn, acc, a);\n        }, 0);\n      }\n      return next(...args, x);\n    };\n  };\n  return next();\n};\n\nconst iSum = infiniteCurry((x, y) => x + y);\nconsole.log(iSum(1)(3)(4)(2)(10)(7)());\n\nconst infiniteVarArgsCurry = (fn, seed) => {\n  const reduceValue = (args, seedValue) =>\n    args.reduce((acc, a) => {\n      return fn.call(fn, acc, a);\n    }, seedValue);\n  const next = (...args) => {\n    return (...x) => {\n      if (!x.length) {\n        return reduceValue(args, seed);\n      }\n      return next(...args, reduceValue(x, seed));\n    };\n  };\n  return next();\n};\n\nconst iSumVarArgs = infiniteVarArgsCurry((x, y) => x + y, 0);\nconst iMul = infiniteVarArgsCurry((x, y) => x * y, 1);\n\nconsole.log(iSumVarArgs(1)(3, 4)(5, 6)(7, 8, 9)());\nconsole.log(iMul(1)(3, 4)(5, 6)());\nconst sum = (...numbers) => numbers.reduce((acc, number) => acc + number, 2);\nconst answer = sum(1, 5, 20, 10);\nconsole.log(answer);\n","// import './sass/main.scss';\nimport './js/currying.js';\n"]}